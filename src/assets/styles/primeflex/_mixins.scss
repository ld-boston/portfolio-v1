@mixin style-class($prop, $map, $responsive: false) {
  @each $key, $val in $map {
    .#{$key} {
      #{$prop}: #{$val} !important;
    }
  }

  @if ($responsive) {
    @each $key, $val in $breakpoints {
      @media screen and (min-width: #{$val}) {
        .#{$key + $separator} {
          @each $key, $val in $map {
            &#{$key} {
              #{$prop}: #{$val} !important;
            }
          }
        }
      }
    }
  }
}

@mixin color-class($name, $prop, $colors, $shades) {
  @each $color in $colors {
    .#{$name}#{$color} {
      @each $shade in $shades {
        &-#{$shade} {
          #{$prop}: var(--#{$color}-#{$shade}) !important;
        }
      }
    }

    .focus#{$separator} {
      &#{$name}#{$color} {
        @each $shade in $shades {
          &-#{$shade}:focus {
            #{$prop}: var(--#{$color}-#{$shade}) !important;
          }
        }
      }
    }

    .hover#{$separator} {
      &#{$name}#{$color} {
        @each $shade in $shades {
          &-#{$shade}:hover {
            #{$prop}: var(--#{$color}-#{$shade}) !important;
          }
        }
      }
    }

    .active#{$separator} {
      &#{$name}#{$color} {
        @each $shade in $shades {
          &-#{$shade}:active {
            #{$prop}: var(--#{$color}-#{$shade}) !important;
          }
        }
      }
    }
  }
}

@mixin surface-class($name, $prop, $shades) {
  @each $shade in $shades {
    .#{$name}-#{$shade} {
      #{$prop}: var(--surface-#{$shade}) !important;
    }
  }

  @each $shade in $shades {
    .focus#{$separator} {
      &#{$name}-#{$shade}:focus {
        #{$prop}: var(--surface-#{$shade}) !important;
      }
    }

    .hover#{$separator} {
      &#{$name}-#{$shade}:hover {
        #{$prop}: var(--surface-#{$shade}) !important;
      }
    }

    .active#{$separator} {
      &#{$name}-#{$shade}:active {
        #{$prop}: var(--surface-#{$shade}) !important;
      }
    }
  }
}

@mixin border-class($name, $directions, $scales) {
  @each $dir, $prop in $directions {
    @for $i from 0 through length($scales) - 1 {
      $borderValue: if($i == 0, 'none', $i);
      $className: #{$name}-#{$dir}-#{$borderValue};
      @if ($dir == '') {
        $className: #{$name}-#{$borderValue};
      }

      .#{$className} {
        @each $propName in $prop {
          #{$propName}-width: nth($scales, $i + 1) !important;
          #{$propName}-style: if($i == 0, none, solid);
        }
      }
    }
  }

  @each $key, $val in $breakpoints {
    @media screen and (min-width: #{$val}) {
      .#{$key + $separator} {
        @each $dir, $prop in $directions {
          @for $i from 0 through length($scales) - 1 {
            $borderValue: if($i == 0, 'none', $i);
            $className: #{$name}-#{$dir}-#{$borderValue};
            @if ($dir == '') {
              $className: #{$name}-#{$borderValue};
            }

            &#{$className} {
              @each $propName in $prop {
                #{$propName}-width: nth($scales, $i + 1) !important;
                #{$propName}-style: if($i == 0, none, solid);
              }
            }
          }
        }
      }
    }
  }
}

@mixin border-radius-class($directions, $value) {
  @each $dir, $prop in $directions {
    .#{$dir}-#{$value} {
      @each $propName in $prop {
        border-#{$propName}-radius: #{$value}px;
      }
    }
  }

  @each $key, $val in $breakpoints {
    @media screen and (min-width: #{$val}) {
      .#{$key + $separator} {
        @each $dir, $prop in $directions {
          &#{$dir}-#{$value} {
            @each $propName in $prop {
              border-#{$propName}-radius: #{$value}px;
            }
          }
        }
      }
    }
  }
}

//
// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}
